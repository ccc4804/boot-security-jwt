package com.example.auth.Controller;

import com.example.auth.Domain.Account;
import com.example.auth.Domain.AccountRole;
import com.example.auth.Repository.AccountRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationRunner;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;


@RestController
@CrossOrigin
//@Controller This means that this class is a Controller
@RequestMapping(path="/newuser") // This means URL's start with /demo (after Application path)
public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AccountRepository accountRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public Map<String, Object> addNewUser (@RequestBody Account account) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        AccountRole role=new AccountRole();
        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        account.setPassword(passwordEncoder.encode(account.getPassword()));
        role.setRoleName("BASIC");
        account.setRoles(Arrays.asList(role));
        Map<String, Object> map = new HashMap<>();

        if (accountRepository.findUserByUsername(account.getUsername()) == null) {
            account.setUsername(account.getUsername());
            account.setEmail(account.getEmail());
            account.setPassword(account.getPassword());
            map.put("success", true);
            accountRepository.save(account);
            return map;
        } else {
            map.put("success", false);
            map.put("message", "duplicated username");
        }
        return map;
    }



    @PostMapping(path="/checkemail")
    public boolean checkEmail (@RequestBody Map<String, String> m) {
        if (accountRepository.findUserByEmail(m.get("email")) == null) return true;
        else return false;
    }

/*
    @PostMapping(path="/login")
    public void loginUser (@RequestBody Account account) {
        accountRepository.findUserByUsername(account.getUsername());
        System.out.println("user email: " + account.getUsername());
    }
*/

    @GetMapping(path="/all")
    public Iterable<Account> getAllUsers() {
        return accountRepository.findAll();
    }
}